from bot import dp, bot, Request, RequestAdd, DeleteProduct, NewShop
from functions import *
from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.next_chioce import next_choice_buttons
from keyboards.generated_keyboard import create_keyboard
from keyboards.owner import owner_buttons
from models import Shop
from excel_functions import new_doc


@dp.message_handler(commands="set_commands", state="*")
async def cmd_set_commands(message: types.Message):
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        commands = [types.BotCommand(command="/new_request", description="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"),
                    types.BotCommand(command="/add_new_shop", description="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É")]
        await bot.set_my_commands(commands)
        await message.answer("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")


@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    telegram_id = message.from_user.id
    full_name = message.from_user.full_name
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {full_name}!\n–¢–≤–æ–π Telegram ID: {telegram_id}')
    if telegram_id == config.ADMIN_ID:
        await message.answer('–ö–∞–∫ –∞–¥–º–∏–Ω—É, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n/set_commands')


@dp.message_handler(text='üîô –û—Ç–º–µ–Ω–∞', state="*")
async def text_cancel_action(message: types.Message, state: FSMContext):
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
    await state.finish()


@dp.message_handler(commands=["add_new_shop"], state="*")
async def command_add_new_shop(message: types.Message):
    telegram_id = message.from_user.id
    if check_id(telegram_id):
        available_districts = get_the_districts_available_to_the_employee(telegram_id)
        districts_keyboard = create_keyboard(available_districts)
        await message.answer('–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤')
        await message.answer('–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞?', reply_markup=districts_keyboard)
        await NewShop.District.set()


@dp.message_handler(state=NewShop.District, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_one(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    district = message.text
    available_districts = get_the_districts_available_to_the_employee(telegram_id)
    if district in available_districts:
        await state.update_data(district=district)
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏?', reply_markup=types.ReplyKeyboardRemove())
        await NewShop.next()
    else:
        await message.answer('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å')


@dp.message_handler(state=NewShop.ShopName, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_two(message: types.Message, state: FSMContext):
    shop_name = message.text
    shop_name = shop_name.strip()
    await state.update_data(shop_name=shop_name)
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –ò–ü –∏–ª–∏ –¢–û–û —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏?')
    await NewShop.next()


@dp.message_handler(state=NewShop.OfficialShopName, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_three(message: types.Message, state: FSMContext):
    official_shop_name = message.text
    official_shop_name = official_shop_name.strip()
    await state.update_data(official_shop_name=official_shop_name)
    await message.answer('–ê–¥—Ä–µ—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏?')
    await NewShop.next()


@dp.message_handler(state=NewShop.Address, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_four(message: types.Message, state: FSMContext):
    address = message.text
    address = address.strip()
    await state.update_data(address=address)
    await message.answer('–í–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä?', reply_markup=owner_buttons)
    await NewShop.next()


@dp.message_handler(state=NewShop.Owner, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_five(message: types.Message, state: FSMContext):
    owner = message.text
    owner = owner.strip()
    if owner == '–í–ª–∞–¥–µ–ª–µ—Ü' or owner == '–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä':
        await state.update_data(owner=owner)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', reply_markup=types.ReplyKeyboardRemove())
        await NewShop.next()
    else:
        await message.answer('–û—à–∏–±–∫–∞. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å.')


@dp.message_handler(state=NewShop.PhoneNumber, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_six(message: types.Message, state: FSMContext):
    phone_number = message.text
    phone_number = phone_number.replace(' ', '').replace('+7', '8').strip()
    if phone_number.isdigit():
        phone_number = int(phone_number)
        await state.update_data(phone_number=phone_number)
        await message.answer('–§.–ò.–û. –ø—Ä–æ–¥–∞–≤—Ü–∞?')
        await NewShop.next()
    else:
        await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: 87775553322')


@dp.message_handler(state=NewShop.SellerName, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_seven(message: types.Message, state: FSMContext):
    seller_name = message.text
    await state.update_data(seller_name=seller_name)
    await message.answer('–ö–∞—Å—Å–æ–≤—ã–π –∞–ø–ø–∞—Ä–∞—Ç –∏–ª–∏ –ò–ò–ù —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:')
    await NewShop.next()


@dp.message_handler(state=NewShop.CashMachine, content_types=types.ContentTypes.TEXT)
async def command_add_new_shop_action_final(message: types.Message, state: FSMContext):
    cash_machine = message.text
    cash_machine = cash_machine.strip()
    await state.update_data(cash_machine=cash_machine)
    data = await state.get_data()
    new_shop = Shop(data['district'], data['shop_name'], data['official_shop_name'], data['address'], data['owner'],
                    data['phone_number'], data['seller_name'], data['cash_machine'])
    new_shop.add_shop()
    await message.answer('–ì–æ—Ç–æ–≤–æ. –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!')
    await state.finish()


@dp.message_handler(commands=["new_request"], state="*")
async def command_request(message: types.Message):
    telegram_id = message.from_user.id
    if check_id(telegram_id):
        available_districts = get_the_districts_available_to_the_employee(telegram_id)
        districts_keyboard = create_keyboard(available_districts)
        await message.answer('–í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω:', reply_markup=districts_keyboard)
        await Request.District.set()


@dp.message_handler(state=Request.District, content_types=types.ContentTypes.TEXT)
async def command_request_action_one(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    district = message.text
    available_districts = get_the_districts_available_to_the_employee(telegram_id)
    if district in available_districts:
        await state.update_data(district=district)
        shops = get_shops_name_by_district(district)
        shops_keyboard = create_keyboard(shops)
        await message.answer(f'–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:', reply_markup=shops_keyboard)
        await Request.next()
    else:
        await message.answer(f'–í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –æ—Ñ–∏—Å')


@dp.message_handler(state=Request.ShopName, content_types=types.ContentTypes.TEXT)
async def command_request_action_two(message: types.Message, state: FSMContext):
    shop_name = message.text
    data = await state.get_data()
    district = data['district']
    shops = get_shops_name_by_district(district)
    if shop_name in shops:
        await state.update_data(shop_name=shop_name)
        products_types = get_products_types()
        products_types_keyboard = create_keyboard(products_types)
        await message.answer(f'–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ', reply_markup=products_types_keyboard)
        await Request.next()
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n'
                             '–ï—Å–ª–∏ –∂–µ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É /add_new_shop')


@dp.message_handler(state=Request.ProductCategory, content_types=types.ContentTypes.TEXT)
async def command_request_action_three(message: types.Message, state: FSMContext):
    product_category = message.text
    products_types = get_products_types()
    if product_category in products_types:
        await state.update_data(product_category=product_category)
        products_names = get_products_names_by_type(product_category)
        products_names_keyboards = create_keyboard(products_names)
        await message.answer(f'–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä: ', reply_markup=products_names_keyboards)
        await Request.next()
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å')


@dp.message_handler(state=Request.Product, content_types=types.ContentTypes.TEXT)
async def command_request_action_four(message: types.Message, state: FSMContext):
    product = message.text
    data = await state.get_data()
    product_category = data['product_category']
    products_names = get_products_names_by_type(product_category)
    if product in products_names:
        await state.update_data(product=product)
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', reply_markup=types.ReplyKeyboardRemove())
        await Request.next()
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å')


@dp.message_handler(state=Request.Number, content_types=types.ContentTypes.TEXT)
async def command_request_action_five(message: types.Message, state: FSMContext):
    employee_text = message.text
    if employee_text.isdigit():
        telegram_id = message.from_user.id
        employee = get_employee_by_id(telegram_id)
        data = await state.get_data()
        shop = get_shop_by_name_and_district(data['shop_name'], data['district'])
        product = get_product_by_name(data['product'])
        product['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = int(message.text)
        product['–°—É–º–º–∞'] = product['–¶–µ–Ω–∞'] * product['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        await state.update_data(product=product)
        order_data = {'employee': employee, 'shop': shop, 'orders': [product], 'total_sum': product['–°—É–º–º–∞']}
        create_new_json_file(str(telegram_id), order_data)
        shop_data = get_shop_data_from_data(order_data)
        await message.answer(f'–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:\n{", ".join(shop_data)}')
        product_data = get_product_data_from_data(order_data)
        for product in product_data:
            await message.answer('\n'.join(product))
        await message.answer(f'–û–±—â–∞—è —Å—É–º–º–∞: {int(order_data["total_sum"])} —Ç–≥')
        await message.answer(f'–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=next_choice_buttons)
        await state.finish()
    else:
        await message.answer(f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ!')


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def text_add_product(message: types.Message):
    products_types = get_products_types()
    products_types_keyboard = create_keyboard(products_types)
    await message.answer(f'–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ', reply_markup=products_types_keyboard)
    await RequestAdd.ProductCategory.set()


@dp.message_handler(state=RequestAdd.ProductCategory, content_types=types.ContentTypes.TEXT)
async def command_request_add_action_one(message: types.Message, state: FSMContext):
    product_category = message.text
    products_types = get_products_types()
    if product_category in products_types:
        await state.update_data(product_category=product_category)
        products_names = get_products_names_by_type(product_category)
        products_names_keyboard = create_keyboard(products_names)
        await message.answer(f'–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä: ', reply_markup=products_names_keyboard)
        await RequestAdd.next()
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å')


@dp.message_handler(state=RequestAdd.Product, content_types=types.ContentTypes.TEXT)
async def command_request_add_action_two(message: types.Message, state: FSMContext):
    product = message.text
    data = await state.get_data()
    product_category = data['product_category']
    products_names = get_products_names_by_type(product_category)
    if product in products_names:
        await state.update_data(product=product)
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', reply_markup=types.ReplyKeyboardRemove())
        await RequestAdd.next()
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å')


@dp.message_handler(state=RequestAdd.Number, content_types=types.ContentTypes.TEXT)
async def command_request_add_action_three(message: types.Message, state: FSMContext):
    employee_text = message.text
    if employee_text.isdigit():
        telegram_id = message.from_user.id
        data = await state.get_data()
        product = get_product_by_name(data['product'])
        product['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = int(message.text)
        product['–°—É–º–º–∞'] = product['–¶–µ–Ω–∞'] * product['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        await state.update_data(product=product)
        order_data = get_data_from_json_file(telegram_id)

        products = get_products_names_from_data(order_data)
        if product['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] in products:
            index = get_product_index_by_name_in_data(product['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'], order_data)
            order_data['orders'][index]['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] += product['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            order_data['orders'][index]['–°—É–º–º–∞'] += product['–°—É–º–º–∞']
        else:
            order_data['orders'].append(product)
        order_data['total_sum'] += product['–°—É–º–º–∞']
        edit_data_in_json_file(telegram_id, order_data)
        shop_data = get_shop_data_from_data(order_data)
        await message.answer(f'–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:\n{", ".join(shop_data)}')
        product_data = get_product_data_from_data(order_data)
        for product in product_data:
            await message.answer('\n'.join(product))
        await message.answer(f'–û–±—â–∞—è —Å—É–º–º–∞: {int(order_data["total_sum"])} —Ç–≥')
        await message.answer(f'–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=next_choice_buttons)
        await state.finish()
    else:
        await message.answer(f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ!')


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def text_delete_product(message: types.Message):
    telegram_id = message.from_user.id
    orders = get_data_from_json_file(telegram_id)["orders"]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for order in orders:
        button = types.KeyboardButton(order['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'])
        markup.add(button)
    cancel_button = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(cancel_button)
    await message.answer(f'–ß—Ç–æ —É–¥–∞–ª–∏—Ç—å?', reply_markup=markup)
    await DeleteProduct.Delete.set()


@dp.message_handler(state=DeleteProduct.Delete, content_types=types.ContentTypes.TEXT)
async def text_delete_product_action(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–û—Ç–º–µ–Ω–∞':
        await message.answer(f'–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=next_choice_buttons)
        await state.finish()
    else:
        telegram_id = message.from_user.id
        data = get_data_from_json_file(telegram_id)
        product_index = get_product_index_by_name_in_data(answer, data)
        if product_index is not None:
            data['total_sum'] -= data['orders'][product_index]['–°—É–º–º–∞']
            del data['orders'][product_index]
            edit_data_in_json_file(telegram_id, data)
            shop_data = get_shop_data_from_data(data)
            await message.answer(f'–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞:\n{", ".join(shop_data)}')
            product_data = get_product_data_from_data(data)
            for product in product_data:
                await message.answer('\n'.join(product))
            await message.answer(f'–û–±—â–∞—è —Å—É–º–º–∞: {int(data["total_sum"])} —Ç–≥')
            await message.answer(f'–ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=next_choice_buttons)
            await state.finish()
        else:
            await message.answer('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message_handler(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å üìÑ')
async def text_the_end(message: types.Message):
    telegram_id = message.from_user.id
    data = get_data_from_json_file(telegram_id)
    request_number = get_last_number_in_requests() + 1
    datetime_now = time_in_uralsk()
    request_data = get_product_name_and_count_from_data(data)
    employee_name = data['employee']['–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –∏–º—è']
    request = [[request_number, datetime_now, data['shop']['–ù–∞–∑–≤–∞–Ω–∏–µ'], data['shop']['–ò–ü/–¢–û–û'], data['shop']['–ê–¥—Ä–µ—Å'],
                request_data, data['total_sum'], data['shop']['–ö–∞—Å—Å–æ–≤—ã–π –∞–ø–ø–∞—Ä–∞—Ç'], employee_name, '–ü—Ä–∏–Ω—è—Ç']]
    append_data_in_table(config.REQUESTS, list_name='–í—Å–µ', user_value=request)
    lists_in_table = get_lists_names_in_table(config.REQUESTS)
    if employee_name not in lists_in_table:
        create_new_list_in_table(config.REQUESTS, employee_name)
        add_base_titles_from_the_first_page_in_list(config.REQUESTS, employee_name)
    append_data_in_table(config.REQUESTS, list_name=employee_name, user_value=request)
    last_request_index_donor = get_table_range(config.REQUESTS, list_name='–í—Å–µ')
    last_request_index_recipient = get_table_range(config.REQUESTS, list_name='–í—Å–µ') - 1
    set_link_to_cell(config.REQUESTS, '–í—Å–µ', f'J{last_request_index_donor}',
                     employee_name, f'J{last_request_index_recipient}')
    uralsk_date = time_in_uralsk_date()
    new_doc(data, request_number, uralsk_date)
    try:
        with open(r'./docs/' + f'–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ {request_number}.xlsx', 'rb') as document:
            await message.answer_document(document)
    except:
        pass
    await message.answer('–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(' ï ·µî·¥•·µî  î', reply_markup=types.ReplyKeyboardRemove())
